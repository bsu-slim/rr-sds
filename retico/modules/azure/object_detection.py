"""A module for object detection provided by azure"""


from collections import deque
import threading
import time

# retico
from retico.core import abstract
from retico.core.visual.common import ImageIU
from retico.core.visual.common import DetectedObjectsIU

# cv2
import cv2
from random import seed
from random import random
seed(1)


# azure
try:
    from azure.cognitiveservices.vision.computervision import ComputerVisionClient
    from msrest.authentication import CognitiveServicesCredentials
except ImportError:
    print("""Importing the Computer Vision SDK for Python failed.
    use the following pip command: 'pip install --upgrade azure-cognitiveservices-vision-computervision'
    Make sure you're using at least Python version 3.x or later.""")
    exit(1)


class AzureObjectDetectionModule(abstract.AbstractModule):
    """An object detection module using Microsoft Azure.

    Attributes:
        key (str): key to Microsoft Cognitive Services for Object Detection API
    """

    @staticmethod
    def name():
        return "Microsoft Azure / Cognitive Services Object Detection"

    @staticmethod
    def description():
        return "An object detection module using Microsoft Azure."

    @staticmethod
    def input_ius():
        return [ImageIU]

    @staticmethod
    def output_iu():
        return DetectedObjectsIU

    def authenticate(self):
        # The resource key for the SlimComputerVision resource on Azure
        COMPUTER_VISION_SUBSCRIPTION_KEY = self.key 

        # The endpoint associated with the Azure resource
        COMPUTER_VISION_ENDPOINT = self.endpoint

        # Authenticating the client. 
        self.client = ComputerVisionClient(COMPUTER_VISION_ENDPOINT, 
                        CognitiveServicesCredentials(COMPUTER_VISION_SUBSCRIPTION_KEY))


    def __init__(self, key, endpoint, width=200, height=200, **kwargs):
        """Initializes the object detector module, authenticates with Azure/MS Cognitive Services.

        Args:
            model_dir (str): The path to the directory of the NLU model
                generated by rasa_nlu.train.
        """
        super().__init__(**kwargs)
        self.client = None
        self.key = key
        self.endpoint = endpoint
        self.width = width
        self.height = height
        self.f = 'tmp{}.png'.format(random())
        self.queue = deque()

    def process_iu(self, input_iu):
        self.queue.clear() # drop frames, if still waiting
        self.queue.append(input_iu)

        return None

    def run_detector(self):

        while True:
            if len(self.queue) == 0:
                time.sleep(0.3)
                continue
            input_iu = self.queue.popleft()
            print(input_iu)
            image = input_iu.payload
            cv2.imwrite(self.f, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
            try:
                with open(self.f, "rb") as image_fd:
                    detected_objects = self.client.detect_objects_in_stream(image_fd)
                    print(detected_objects)
                    if len(detected_objects.objects) == 0:
                        return None
                    else:
                        returning_dictionary = {}
                        count = 0
                        for object in detected_objects.objects:
                            inner_dict = {}
                            inner_dict['xmin'] = object.rectangle.x
                            inner_dict['xmax'] = object.rectangle.x + object.rectangle.w
                            inner_dict['ymin'] = object.rectangle.y
                            inner_dict['ymax'] = object.rectangle.y + object.rectangle.h
                            inner_dict['label'] = object.object_property
                            returning_dictionary["object"+str(count)] = inner_dict
                            count += 1
                        returning_dictionary['num_objs'] = len(returning_dictionary)
                        output_iu = self.create_iu(input_iu)
                        output_iu.set_detected_objects(image, returning_dictionary)
                        self.append(output_iu)
            except FileNotFoundError:
                print("The file, {}, was not found.".format(image_file_path))
                exit(1)

    def setup(self):
        self.authenticate()
        t = threading.Thread(target=self.run_detector)
        t.start()
